const path = require('path');
const glob = require('glob');
const fs = require('fs');

function toTitleCase(str) {
  return str.replace(/-\w/g, txt => {
    return txt.charAt(1).toUpperCase() + txt.substr(2).toLowerCase();
  });
}

module.exports = function(grunt) {
  grunt.registerMultiTask(
    'metadata-function-map',
    'Task to generate the metadata-function-map file',
    function() {
      const done = this.async();
      const files = grunt.task.current.data.files;

      files.forEach(file => {
        const src = Array.isArray(file.src) ? file.src : [file.src];
        const map = {};
        let outFile =
          '// This file is automatically generated using build/tasks/metadata-function-map.js\n';

        src.forEach(globPath => {
          glob.sync(globPath).forEach(rootPath => {
            const relativePath = rootPath.replace('lib/', '../../');
            const filename = path.basename(rootPath, '.js');
            const functionName = toTitleCase(filename);

            outFile += `import ${functionName} from '${relativePath}';\n`;
            map[filename] = functionName;
          });
        });

        outFile += `\nconst metadataFunctionMap = {\n`;
        Object.keys(map).forEach(key => {
          outFile += `  '${key}': ${map[key]},\n`;
        });
        outFile += `};\n\nexport default metadataFunctionMap;`;

        try {
          fs.writeFileSync(file.dest, outFile, 'utf-8');
          done();
        } catch (err) {
          done(err);
        }
      });
    }
  );
};
