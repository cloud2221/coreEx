From 99c4b53bc194d59d6156aa3ac58048a537f7a9ac Mon Sep 17 00:00:00 2001
From: Zhenyao Mo <zmo@chromium.org>
Date: Sat, 07 Oct 2017 01:28:03 +0000
Subject: [PATCH] Move flash features blacklisting to GPU process.

In order for flash to access blacklist decisions on the renderer side,
this CL adds code to create a sync GPU channel if it doesn't exist already.
This might have performance impact on flash content startup.

BUG=744658
TEST=bots
R=piman@chromium.org

Cq-Include-Trybots: master.tryserver.chromium.android:android_optional_gpu_tests_rel;master.tryserver.chromium.linux:linux_optional_gpu_tests_rel;master.tryserver.chromium.mac:mac_optional_gpu_tests_rel;master.tryserver.chromium.win:win_optional_gpu_tests_rel
Change-Id: Ic72e7c5ec88997807f0f547d4b2b1e876cf4933b
Reviewed-on: https://chromium-review.googlesource.com/706275
Reviewed-by: Antoine Labour <piman@chromium.org>
Commit-Queue: Zhenyao Mo <zmo@chromium.org>
Cr-Commit-Position: refs/heads/master@{#507255}
---

diff --git a/content/browser/gpu/gpu_data_manager_impl_private.cc b/content/browser/gpu/gpu_data_manager_impl_private.cc
index 072e364..c863a65 100644
--- a/content/browser/gpu/gpu_data_manager_impl_private.cc
+++ b/content/browser/gpu/gpu_data_manager_impl_private.cc
@@ -816,15 +816,6 @@
     WebPreferences* prefs) const {
   DCHECK(prefs);
 
-  if (IsFeatureBlacklisted(gpu::GPU_FEATURE_TYPE_FLASH3D))
-    prefs->flash_3d_enabled = false;
-  if (IsFeatureBlacklisted(gpu::GPU_FEATURE_TYPE_FLASH_STAGE3D)) {
-    prefs->flash_stage3d_enabled = false;
-    prefs->flash_stage3d_baseline_enabled = false;
-  }
-  if (IsFeatureBlacklisted(gpu::GPU_FEATURE_TYPE_FLASH_STAGE3D_BASELINE))
-    prefs->flash_stage3d_baseline_enabled = false;
-
 #if defined(USE_AURA)
   if (!CanUseGpuBrowserCompositor()) {
     prefs->accelerated_2d_canvas_enabled = false;
diff --git a/content/renderer/pepper/pepper_in_process_resource_creation.cc b/content/renderer/pepper/pepper_in_process_resource_creation.cc
index 627c1f8..e733e33 100644
--- a/content/renderer/pepper/pepper_in_process_resource_creation.cc
+++ b/content/renderer/pepper/pepper_in_process_resource_creation.cc
@@ -14,6 +14,7 @@
 #include "content/renderer/pepper/ppapi_preferences_builder.h"
 #include "content/renderer/pepper/renderer_ppapi_host_impl.h"
 #include "content/renderer/render_view_impl.h"
+#include "gpu/config/gpu_feature_info.h"
 #include "ipc/ipc_message.h"
 #include "ipc/ipc_message_macros.h"
 #include "ppapi/host/ppapi_host.h"
@@ -53,8 +54,13 @@
     const PP_BrowserFont_Trusted_Description* description) {
   if (!BrowserFontResource_Trusted::IsPPFontDescriptionValid(*description))
     return 0;
+  // BrowserFontResource_Trusted and in turn PPFontDescToWebFontDesc do not
+  // care about preferences of GPU features, so no need to query them from
+  // GPU process whether these features are blacklisted or not.
+  gpu::GpuFeatureInfo gpu_feature_info;
   ppapi::Preferences prefs(PpapiPreferencesBuilder::Build(
-      host_impl_->GetRenderViewForInstance(instance)->GetWebkitPreferences()));
+      host_impl_->GetRenderViewForInstance(instance)->GetWebkitPreferences(),
+      gpu_feature_info));
   return (new BrowserFontResource_Trusted(
               host_impl_->in_process_router()->GetPluginConnection(instance),
               instance,
diff --git a/content/renderer/pepper/plugin_module.cc b/content/renderer/pepper/plugin_module.cc
index db23959..1c05507 100644
--- a/content/renderer/pepper/plugin_module.cc
+++ b/content/renderer/pepper/plugin_module.cc
@@ -34,6 +34,7 @@
 #include "content/renderer/pepper/ppb_var_deprecated_impl.h"
 #include "content/renderer/pepper/ppb_video_decoder_impl.h"
 #include "content/renderer/pepper/renderer_ppapi_host_impl.h"
+#include "content/renderer/render_thread_impl.h"
 #include "content/renderer/render_view_impl.h"
 #include "ppapi/c/dev/ppb_audio_input_dev.h"
 #include "ppapi/c/dev/ppb_audio_output_dev.h"
@@ -724,12 +725,24 @@
       path, render_frame->GetRoutingID(), plugin_child_id));
   std::unique_ptr<HostDispatcherWrapper> dispatcher(new HostDispatcherWrapper(
       this, peer_pid, plugin_child_id, permissions, is_external));
-  if (!dispatcher->Init(channel_handle,
-                        &GetInterface,
+
+  RenderThreadImpl* render_thread = RenderThreadImpl::current();
+  if (!render_thread)
+    return nullptr;
+  scoped_refptr<gpu::GpuChannelHost> channel =
+      render_thread->EstablishGpuChannelSync();
+  // If no channel is established, feature statuses are unknown and disabled.
+  const gpu::GpuFeatureInfo default_gpu_feature_info;
+  const gpu::GpuFeatureInfo& gpu_feature_info =
+      channel ? channel->gpu_feature_info() : default_gpu_feature_info;
+
+  if (!dispatcher->Init(channel_handle, &GetInterface,
                         ppapi::Preferences(PpapiPreferencesBuilder::Build(
-                            render_frame->render_view()->webkit_preferences())),
-                        hung_filter.get()))
-    return NULL;
+                            render_frame->render_view()->webkit_preferences(),
+                            gpu_feature_info)),
+                        hung_filter.get())) {
+    return nullptr;
+  }
 
   RendererPpapiHostImpl* host_impl =
       RendererPpapiHostImpl::CreateOnModuleForOutOfProcess(
diff --git a/content/renderer/pepper/ppapi_preferences_builder.cc b/content/renderer/pepper/ppapi_preferences_builder.cc
index a487887..b95dae2 100644
--- a/content/renderer/pepper/ppapi_preferences_builder.cc
+++ b/content/renderer/pepper/ppapi_preferences_builder.cc
@@ -5,12 +5,14 @@
 #include "content/renderer/pepper/ppapi_preferences_builder.h"
 
 #include "content/public/common/web_preferences.h"
+#include "gpu/config/gpu_feature_info.h"
 #include "ppapi/shared_impl/ppapi_preferences.h"
 
 namespace content {
 
 ppapi::Preferences PpapiPreferencesBuilder::Build(
-    const WebPreferences& prefs) {
+    const WebPreferences& prefs,
+    const gpu::GpuFeatureInfo& gpu_feature_info) {
   ppapi::Preferences ppapi_prefs;
   ppapi_prefs.standard_font_family_map = prefs.standard_font_family_map;
   ppapi_prefs.fixed_font_family_map = prefs.fixed_font_family_map;
@@ -19,10 +21,19 @@
   ppapi_prefs.default_font_size = prefs.default_font_size;
   ppapi_prefs.default_fixed_font_size = prefs.default_fixed_font_size;
   ppapi_prefs.number_of_cpu_cores = prefs.number_of_cpu_cores;
-  ppapi_prefs.is_3d_supported = prefs.flash_3d_enabled;
-  ppapi_prefs.is_stage3d_supported = prefs.flash_stage3d_enabled;
+  ppapi_prefs.is_3d_supported =
+      (prefs.flash_3d_enabled &&
+       (gpu_feature_info.status_values[gpu::GPU_FEATURE_TYPE_FLASH3D] ==
+        gpu::kGpuFeatureStatusEnabled));
+  ppapi_prefs.is_stage3d_supported =
+      (prefs.flash_stage3d_enabled &&
+       (gpu_feature_info.status_values[gpu::GPU_FEATURE_TYPE_FLASH_STAGE3D] ==
+        gpu::kGpuFeatureStatusEnabled));
   ppapi_prefs.is_stage3d_baseline_supported =
-      prefs.flash_stage3d_baseline_enabled;
+      (prefs.flash_stage3d_baseline_enabled &&
+       (gpu_feature_info
+            .status_values[gpu::GPU_FEATURE_TYPE_FLASH_STAGE3D_BASELINE] ==
+        gpu::kGpuFeatureStatusEnabled));
   ppapi_prefs.is_accelerated_video_decode_enabled =
       prefs.pepper_accelerated_video_decode_enabled;
   return ppapi_prefs;
diff --git a/content/renderer/pepper/ppapi_preferences_builder.h b/content/renderer/pepper/ppapi_preferences_builder.h
index 6a8004a..0a08fb76 100644
--- a/content/renderer/pepper/ppapi_preferences_builder.h
+++ b/content/renderer/pepper/ppapi_preferences_builder.h
@@ -5,6 +5,9 @@
 #ifndef CONTENT_RENDERER_PEPPER_PPAPI_PREFERENCES_BUILDER_H_
 #define CONTENT_RENDERER_PEPPER_PPAPI_PREFERENCES_BUILDER_H_
 
+namespace gpu {
+struct GpuFeatureInfo;
+}
 namespace ppapi {
 struct Preferences;
 }
@@ -15,7 +18,8 @@
 
 class PpapiPreferencesBuilder {
  public:
-  static ppapi::Preferences Build(const WebPreferences& prefs);
+  static ppapi::Preferences Build(const WebPreferences& prefs,
+                                  const gpu::GpuFeatureInfo& gpu_feature_info);
 };
 
 }  // namespace content
diff --git a/gpu/config/gpu_util.cc b/gpu/config/gpu_util.cc
index 2b3fa2a..cae00b99 100644
--- a/gpu/config/gpu_util.cc
+++ b/gpu/config/gpu_util.cc
@@ -106,6 +106,55 @@
   return kGpuFeatureStatusEnabled;
 }
 
+GpuFeatureStatus GetFlash3DFeatureStatus(
+    const std::set<int>& blacklisted_features,
+    bool use_swift_shader,
+    bool use_swift_shader_for_webgl) {
+  if (use_swift_shader) {
+    // This is for testing only. Chrome should exercise the GPU accelerated
+    // path on top of SwiftShader driver.
+    return kGpuFeatureStatusEnabled;
+  }
+  if (use_swift_shader_for_webgl)
+    return kGpuFeatureStatusDisabled;
+  if (blacklisted_features.count(GPU_FEATURE_TYPE_FLASH3D))
+    return kGpuFeatureStatusBlacklisted;
+  return kGpuFeatureStatusEnabled;
+}
+
+GpuFeatureStatus GetFlashStage3DFeatureStatus(
+    const std::set<int>& blacklisted_features,
+    bool use_swift_shader,
+    bool use_swift_shader_for_webgl) {
+  if (use_swift_shader) {
+    // This is for testing only. Chrome should exercise the GPU accelerated
+    // path on top of SwiftShader driver.
+    return kGpuFeatureStatusEnabled;
+  }
+  if (use_swift_shader_for_webgl)
+    return kGpuFeatureStatusDisabled;
+  if (blacklisted_features.count(GPU_FEATURE_TYPE_FLASH_STAGE3D))
+    return kGpuFeatureStatusBlacklisted;
+  return kGpuFeatureStatusEnabled;
+}
+
+GpuFeatureStatus GetFlashStage3DBaselineFeatureStatus(
+    const std::set<int>& blacklisted_features,
+    bool use_swift_shader,
+    bool use_swift_shader_for_webgl) {
+  if (use_swift_shader) {
+    // This is for testing only. Chrome should exercise the GPU accelerated
+    // path on top of SwiftShader driver.
+    return kGpuFeatureStatusEnabled;
+  }
+  if (use_swift_shader_for_webgl)
+    return kGpuFeatureStatusDisabled;
+  if (blacklisted_features.count(GPU_FEATURE_TYPE_FLASH_STAGE3D) ||
+      blacklisted_features.count(GPU_FEATURE_TYPE_FLASH_STAGE3D_BASELINE))
+    return kGpuFeatureStatusBlacklisted;
+  return kGpuFeatureStatusEnabled;
+}
+
 void AppendWorkaroundsToCommandLine(const GpuFeatureInfo& gpu_feature_info,
                                     base::CommandLine* command_line) {
   if (gpu_feature_info.IsWorkaroundEnabled(DISABLE_D3D11)) {
@@ -255,6 +304,15 @@
   gpu_feature_info.status_values[GPU_FEATURE_TYPE_ACCELERATED_2D_CANVAS] =
       Get2DCanvasFeatureStatus(blacklisted_features, use_swift_shader,
                                use_swift_shader_for_webgl);
+  gpu_feature_info.status_values[GPU_FEATURE_TYPE_FLASH3D] =
+      GetFlash3DFeatureStatus(blacklisted_features, use_swift_shader,
+                              use_swift_shader_for_webgl);
+  gpu_feature_info.status_values[GPU_FEATURE_TYPE_FLASH_STAGE3D] =
+      GetFlashStage3DFeatureStatus(blacklisted_features, use_swift_shader,
+                                   use_swift_shader_for_webgl);
+  gpu_feature_info.status_values[GPU_FEATURE_TYPE_FLASH_STAGE3D_BASELINE] =
+      GetFlashStage3DBaselineFeatureStatus(
+          blacklisted_features, use_swift_shader, use_swift_shader_for_webgl);
 
   std::set<base::StringPiece> all_disabled_extensions;
   std::string disabled_gl_extensions_value =
