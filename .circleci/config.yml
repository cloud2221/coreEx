version: 2.1

defaults: &defaults
  working_directory: ~/axe-core

unix_box: &unix_box
  docker:
    - image: cimg/node:16.14-browsers

unix_nightly_box: &unix_nightly_box
  docker:
    - image: cimg/node:lts-browsers

orbs:
  puppeteer: threetreeslight/puppeteer@0.1.2
  browser-tools: circleci/browser-tools@1.1.0

set_npm_auth: &set_npm_auth
  run: npm config set "//registry.npmjs.org/:_authToken" $NPM_AUTH

restore_dependency_cache_unix: &restore_dependency_cache_unix
  restore_cache:
    keys:
      - v9-cache-unix-{{ checksum "package-lock.json" }}
      - v9-cache-unix-

jobs:
  # Fetch and cache dependencies.
  dependencies_unix:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *set_npm_auth
      - <<: *restore_dependency_cache_unix
      - run: npm ci
      - run: npx browser-driver-manager install chromedriver --verbose
      - save_cache:
          key: v9-cache-unix-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  # Run ESLINT
  lint:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run eslint

  # Run the test suite.
  test_chrome:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test -- --browsers Chrome
      - run: npm run test:integration:chrome

  test_firefox:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run build
      - run: npm run test -- --browsers Firefox
      - run: npm run test:integration:firefox

  # Run examples under `doc/examples`
  test_examples:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:examples

  # Run ACT test cases
  test_act:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:act

  # Run ARIA practices test cases
  test_aria_practices:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:apg

  # Test locale files
  test_locales:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:locales

  # Test virtual rules
  test_virtual_rules:
    <<: *defaults
    <<: *unix_box
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:virtual-rules

  # Run the test suite for nightly builds.
  test_nightly_browsers:
    <<: *defaults
    <<: *unix_nightly_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run build
      - run:
          name: Install Chrome and ChromeDriver Beta
          command: npx browser-driver-manager install chrome=beta chromedriver=beta --verbose
      - run:
          name: Install Firefox Nightly
          command: |
            wget -O firefox-nightly.tar.bz2 "https://download.mozilla.org/?product=firefox-nightly-latest-ssl&os=linux64&lang=en-US"
            tar xf firefox-nightly.tar.bz2
      - run:
          name: Set Environment Variable
          command: echo "export FIREFOX_NIGHTLY_BIN=$(pwd)/firefox/firefox-bin" >> $BASH_ENV
      - run: npm run test -- --browsers Chrome,FirefoxNightly

  # Run the test suite for nightly builds.
  test_nightly_act:
    <<: *defaults
    <<: *unix_nightly_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - browser-tools/install-browser-tools
      # install ACT rules
      # install first as for some reason installing a single package
      # also re-installs all repo dependencies as well
      - run: npm install w3c/wcag-act-rules#main
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:act

  # Run the test suite for nightly builds.
  test_nightly_aria_practices:
    <<: *defaults
    <<: *unix_nightly_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - browser-tools/install-browser-tools
      # install ARIA practices
      # install first as for some reason installing a single package
      # also re-installs all repo dependencies as well
      - run: npm install w3c/aria-practices#main
      - run: npx browser-driver-manager install chromedriver --verbose
      - run: npm run build
      - run: npm run test:apg

  # Test api docs can be built
  build_api_docs:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run api-docs

  # Test newest axe-core version rule help docs are active (only on
  # master prs)
  test_rule_help_version:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run test:rule-help-version

  # Test node API
  test_node:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run build
      - run: npm run test:node

  # Release a "next" version
  next_release:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *set_npm_auth
      - <<: *restore_dependency_cache_unix
      - run: npm run build
      - run: npm run next-release
      - run: .circleci/verify-release.sh
      - run: npm publish --tag=next

  # Release a "production" version
  release:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *set_npm_auth
      - <<: *restore_dependency_cache_unix
      - run: npm run build
      - run: npm run sri-validate
      - run: .circleci/verify-release.sh
      - run: npm publish

  # Create a GitHub release.
  github_release:
    docker:
      - image: cimg/go:1.17.1
    steps:
      - checkout
      - run: go get gopkg.in/aktau/github-release.v0
      - run:
          name: Download and run GitHub release script
          command: |
            curl https://raw.githubusercontent.com/dequelabs/attest-release-scripts/develop/src/node-github-release.sh -s -o ./node-github-release.sh
            chmod +x ./node-github-release.sh
            ./node-github-release.sh

  # Verify released package has all required files
  verify_release:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: .circleci/verify-release.sh post

  # Verify canary released package has all required files
  verify_next_release:
    <<: *defaults
    <<: *unix_box
    steps:
      - checkout
      - <<: *restore_dependency_cache_unix
      - run: npm run next-release
      - run: .circleci/verify-release.sh post

workflows:
  version: 2
  build:
    jobs:
      # install deps
      - dependencies_unix
      # Run linting
      - lint:
          requires:
            - dependencies_unix
      # Run tests on all commits, but after installing dependencies
      - test_chrome:
          requires:
            - lint
      - test_firefox:
          requires:
            - test_chrome
      - test_examples:
          requires:
            - test_chrome
      - test_act:
          requires:
            - test_chrome
      - test_aria_practices:
          requires:
            - test_chrome
      - test_locales:
          requires:
            - test_chrome
      - test_virtual_rules:
          requires:
            - test_chrome
      - build_api_docs:
          requires:
            - test_chrome
      - test_rule_help_version:
          requires:
            - test_chrome
      - test_node:
          requires:
            - test_chrome
      # Hold for approval
      - hold:
          type: approval
          requires:
            - test_chrome
            - test_examples
            - test_locales
            - test_virtual_rules
            - build_api_docs
            - test_rule_help_version
            - test_node
          filters:
            branches:
              only:
                - master
      # Run a next release on "develop" commits, but only after the tests pass and dependencies are installed
      - next_release:
          requires:
            - dependencies_unix
            - test_chrome
            - test_firefox
            - test_examples
            - test_locales
            - test_virtual_rules
            - build_api_docs
          filters:
            branches:
              only: develop
      # Run a production release on "master" commits, but only after the tests pass and dependencies are installed
      - release:
          requires:
            - dependencies_unix
            - test_chrome
            - test_firefox
            - test_examples
            - test_locales
            - test_virtual_rules
            - build_api_docs
            - test_rule_help_version
            - test_node
            - hold
          filters:
            branches:
              only: master
      # Verify releases have all required files
      - verify_release:
          requires:
            - release
          filters:
            branches:
              only: master
      - verify_next_release:
          requires:
            - next_release
          filters:
            branches:
              only: develop
      - github_release:
          requires:
            - release
  nightly:
    triggers:
      - schedule:
          # run at 00:00 UTC every day
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
    jobs:
      - dependencies_unix
      - test_nightly_browsers:
          requires:
            - dependencies_unix
      - test_nightly_act:
          requires:
            - dependencies_unix
      - test_nightly_aria_practices:
          requires:
            - dependencies_unix
